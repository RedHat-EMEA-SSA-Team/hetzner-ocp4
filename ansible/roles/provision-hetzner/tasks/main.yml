---
- name: Retrieve first public key fingerprint 
  uri:
    url: https://robot-ws.your-server.de/key
    return_content: yes
    method: GET
    user: "{{ hetzner_webservice_username }}"
    password: "{{ hetzner_webservice_password }}"
    force_basic_auth: yes
    status_code: 200
  register: key
  delegate_to: localhost

- name: Set authorized_key fact
  set_fact:
    authorized_key: "{{ key.json[0].key.fingerprint }}"

- name: Check rescue mode
  uri:
    url: "https://robot-ws.your-server.de/boot/{{ ansible_host }}/rescue"
    method: GET
    user: "{{ hetzner_webservice_username }}"
    password: "{{ hetzner_webservice_password }}"
    force_basic_auth: yes
    status_code: 200
  register: rescue
  delegate_to: localhost

- name: Activate rescue mode
  when: rescue.json.rescue.active == false
  uri:
    url: "https://robot-ws.your-server.de/boot/{{ ansible_host }}/rescue"
    method: POST
    user: "{{ hetzner_webservice_username }}"
    password: "{{ hetzner_webservice_password }}"
    force_basic_auth: yes
    body: "os=linux&arch=64&authorized_key={{ authorized_key }}"
    body_format: form-urlencoded
    status_code: 200
  register: activated
  delegate_to: localhost

- name: Execute hardware reset
  uri:
    url: "https://robot-ws.your-server.de/reset/{{ ansible_host }}"
    method: POST
    user: "{{ hetzner_webservice_username }}"
    password: "{{ hetzner_webservice_password }}"
    force_basic_auth: yes
    body: "type=hw"
    status_code: 200
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  delegate_to: localhost

- name: Remove server from local known_hosts file
  local_action: command /usr/bin/ssh-keygen -R {{ ansible_host }}
  ignore_errors: yes

- name: Pause a bit for the hardware reset to kick in
  pause: seconds=15

- name: Wait 300 seconds for port 22 to become open
  wait_for:
    port: 22
    host: '{{ ansible_host }}'
    delay: 10
    timeout: 300
  connection: local

- name: Ping rescue system
  ping:
  retries: 10
  delay: 1

- name: Copy autosetup configuration file
  template:
    src: "{{ hetzner_autosetup_file }}"
    dest: /root/autosetup
    owner: root
    group: root
    mode: 0644

- name: Run installimage 
  command: "/root/.oldroot/nfs/install/installimage -a -c /root/autosetup"
  environment:
    TERM: "vt100"
  ignore_errors: yes
  register: result

- debug:
    var: result
    verbosity: 1

- name: Check stderr from installimage
  fail:
    msg: "Something want wrong at installimage: {{ result.stderr_lines | join('\n') }}"
  when:
    - result.stderr_lines | length > 0
    - hetzner_image_ignore_errors == false

- name: Check stdout from installimage
  fail:
    msg: "Something want wrong at installimage: {{ result.stdout_lines | join('\n') }}"
  when:
    - result.stdout is search('An error occured while installing the new system!')
    - hetzner_image_ignore_errors == false

- name: Reboot server
  shell: sleep 2 && shutdown -r now
  async: 1
  poll: 0
  ignore_errors: yes

- name: Remove server from local known_hosts file
  local_action: command /usr/bin/ssh-keygen -R {{ ansible_host }}
  ignore_errors: yes

- name: Wait 300 seconds for port 22 to become open
  wait_for:
    port: 22
    host: '{{ ansible_host }}'
    delay: 10
    timeout: 300
  connection: local

- name: Check ansible_python_interpreter
  ping:
  register: rc
  ignore_errors: yes

- name: Set ansible_python_interpreter to /usr/libexec/platform-python (RHEL 8)
  set_fact:
    ansible_python_interpreter: /usr/libexec/platform-python
  when: rc.failed == true

- name: Disable password authentication
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication yes'
    line: 'PasswordAuthentication no'

- name: Restart sshd
  systemd:
    name: sshd.service
    state: restarted

- name: Prepare host
  block:
  - name: Install required packages
    yum:
      name:
        - ansible
        - git

  - name: Create temp directory
    tempfile:
      state: directory
    register: temp_dir

  - name: Synchronize files
    synchronize:
      src: "{{ playbook_dir }}"
      dest:  "{{ temp_dir.path }}"
      delete: yes
      recursive: yes

  - name: Synchronize cluster.yml
    synchronize:
      src: "{{ playbook_dir }}/../cluster.yml"
      dest:  "{{ temp_dir.path }}/cluster.yml"
      recursive: yes
      delete: yes

  - name: Installation command info
    debug:
      msg:
        - "Run setup on {{ ansible_host }} by running"
        - "pushd {{ temp_dir.path }}/ansible"
        - "ansible-playbook setup.yml"
  when: hetzner_provision_prepare_host
