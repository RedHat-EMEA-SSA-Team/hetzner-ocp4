---
- name: Create own kubeconfig directory
  ansible.builtin.file:
    state: directory
    path: "{{ openshift_install_dir }}/config/"
    mode: 0755

- name: Copy kubeconfig
  ansible.builtin.copy:
    src: "{{ openshift_install_dir }}/auth/kubeconfig"
    dest: "{{ openshift_install_dir }}/config/kubeconfig"
    remote_src: yes
    mode: 0644

- name: Slurp kubeconfig
  ansible.builtin.slurp:
    src: "{{ openshift_install_dir }}/auth/kubeconfig"
  register: kubeconfig_raw

- name: Copy content into kubeconfig
  ansible.builtin.set_fact:
    kubeconfig: "{{ kubeconfig_raw['content'] | b64decode | from_yaml }}"

- name: Slurp kubeadmin-password
  ansible.builtin.slurp:
    src: "{{ openshift_install_dir }}/auth/kubeadmin-password"
  register: kubeadminpassword_raw

- name: Copy content into kubeadmin_password
  ansible.builtin.set_fact:
    kubeadmin_password: "{{ kubeadminpassword_raw['content'] | b64decode }}"

# - name: Fetch Kubeconfig
#   set_fact:
#     kubeconfig: "{{ lookup('file',  openshift_install_dir ~ '/config/kubeconfig' ) | from_yaml }}"

- name: Select cluster & user
  ansible.builtin.set_fact:
    cluster: "{{ kubeconfig | json_query('clusters[?name==`'~ cluster_name ~'`].cluster') | first }}"
    user: "{{ kubeconfig | json_query('users[?name==`admin`].user') | first }}"

- name: Set kube variables
  ansible.builtin.set_fact:
    k8s_kubeconfig: "{{ openshift_install_dir }}/config/kubeconfig"
    k8s_host: "{{ cluster.server }}"
    k8s_ca_cert: "{{ openshift_install_dir }}/config/ca.crt"
    k8s_client_key: "{{ openshift_install_dir }}/config/client.key"
    k8s_client_cert: "{{ openshift_install_dir }}/config/client.crt"

- name: Create k8s_ca_cert
  ansible.builtin.copy:
    content: "{{ cluster['certificate-authority-data'] | b64decode }}"
    dest: "{{ k8s_ca_cert }}"
    mode: 0644

- name: Create k8s_client_key
  ansible.builtin.copy:
    content: "{{ user['client-key-data'] | b64decode }}"
    dest: "{{ k8s_client_key }}"
    mode: 0644

- name: Create k8s_client_cert
  ansible.builtin.copy:
    content: "{{ user['client-certificate-data'] | b64decode }}"
    dest: "{{ k8s_client_cert }}"
    mode: 0644

- name: Set kube variables
  ansible.builtin.set_fact:
    k8s_kubeconfig: "/config/{{ cluster_name }}/kubeconfig"
    k8s_host: "{{ cluster.server }}"
    k8s_ca_cert: "/config/{{ cluster_name }}/ca.crt"
    k8s_client_key: "/config/{{ cluster_name }}/client.key"
    k8s_client_cert: "/config/{{ cluster_name }}/client.crt"

- name: Create local configuration directory
  delegate_to: localhost
  ansible.builtin.file:
    state: directory
    path: "{{ k8s_kubeconfig | dirname }}"
    mode: 0755

- name: Create local kubeconfig
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ kubeconfig_raw['content'] | b64decode }}"
    dest: "{{ k8s_kubeconfig }}"
    mode: 0640

- name: Create local kubeadmin-password
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ kubeadmin_password }}"
    dest: "{{ k8s_kubeconfig | dirname }}/kubeadmin-password"
    mode: 0640

- name: Create local k8s_ca_cert
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ cluster['certificate-authority-data'] | b64decode }}"
    dest: "{{ k8s_ca_cert }}"
    mode: 0644

- name: Create local k8s_client_key
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ user['client-key-data'] | b64decode }}"
    dest: "{{ k8s_client_key }}"
    mode: 0600

- name: Create local k8s_client_cert
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ user['client-certificate-data'] | b64decode }}"
    dest: "{{ k8s_client_cert }}"
    mode: 0644

