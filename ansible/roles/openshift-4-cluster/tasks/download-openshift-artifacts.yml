---

- name: Build openshift download urls
  ansible.builtin.set_fact:
    tmp_openshift_install_download_url: "{{ openshift_location }}/openshift-install-linux-{{ openshift_version }}.tar.gz"
    tmp_openshift_client_download_url: "{{ openshift_location }}/openshift-client-linux-{{ openshift_version }}.tar.gz"

- name: Init check_urls
  ansible.builtin.set_fact:
    check_urls:
      - "{{ coreos_download_url }}"
      - "{{ tmp_openshift_install_download_url }}"
      - "{{ tmp_openshift_client_download_url }}"
      - "{{ (download_oc_mirror is true) | ternary('{{ openshift_location }}/oc-mirror.tar.gz', '') }}"
      - "{{ opm_download_url }}"
      - "{{ helm_cli_location }}"
      - "{{ butane_cli_location }}"

- name: Filter check_urls
  ansible.builtin.set_fact:
    check_urls: "{{ check_urls|select|list }}"

- name: Add coreos_csum_url to check_urls
  ansible.builtin.set_fact:
    check_urls: "{{ check_urls + [coreos_csum_url] }}"
  when: coreos_csum_str is not defined

- name: Check download urls
  ansible.builtin.uri:
    method: HEAD
    url: "{{ item }}"
    status_code:
      - 200
      # Forbidden because of github forwards to aws s3.
      # HEAD request to S3 is forbidden
      - 403
  with_items: "{{ check_urls }}"

- name: check if coreos image already downloaded and get checksum
  ansible.builtin.stat:
    checksum_algorithm: sha256
    path: "{{ coreos_path }}/{{ coreos_file }}"
  register: coreos_old_image

- name: verify existing coreos image is valid
  ansible.builtin.lineinfile:
    name: "{{ coreos_path }}/{{ coreos_file }}.sha256.txt"
    line: "{{ coreos_old_image.stat.checksum }}  {{ coreos_file }}"
    state: present
  check_mode: true
  register: csum_check
  failed_when: (csum_check is changed) or (csum_check is failed)
  ignore_errors: true
  when: coreos_old_image.stat.exists

- name: Download fresh coreos image if previous doesn't exist
  block:
    # Work-a-round for https://github.com/ansible/ansible/issues/71420
    #   fix not shipped yet
    - name: Findout exactly sha256
      ansible.builtin.set_fact:
        coreos_csum_str: "{{ lookup('url', coreos_csum_url,  split_lines=False ).split('\n') |map('regex_search','.*' + coreos_download_url | basename + '$') | select('string') | first | regex_search('^([a-z0-9])+') }}"  # noqa line-length
      when: coreos_csum_str is not defined

    - name: download coreos
      ansible.builtin.get_url:
        url: "{{ coreos_download_url }}"
        dest: "{{ coreos_path }}/{{ coreos_download_url | basename }}"
        checksum: "sha256:{{ coreos_csum_str }}"
      register: coreos_download

    - name: Get filetype
      ansible.builtin.stat:
        path: "{{ coreos_path }}/{{ coreos_download_url | basename }}"
      register: coreos_stat

    - name: unzip the coreos
      ansible.builtin.command: "gunzip {{ coreos_path }}/{{ coreos_download_url | basename }}"
      args:
        chdir: "{{ coreos_path }}"
        creates: "{{ coreos_path }}/{{ coreos_file }}"
      register: unzip
      when: coreos_stat.stat.mimetype == 'application/x-gzip' or coreos_stat.stat.mimetype == 'application/gzip'

    - name: unxz the coreos
      ansible.builtin.command: "unxz {{ coreos_path }}/{{ coreos_download_url | basename }}"
      args:
        chdir: "{{ coreos_path }}"
        creates: "{{ coreos_path }}/{{ coreos_file }}"
      register: unxz
      when: coreos_stat.stat.mimetype == 'application/x-xz'

    - name: calculate checksum of the new coreos image
      ansible.builtin.stat:
        checksum_algorithm: sha256
        path: "{{ coreos_path }}/{{ coreos_file }}"
      register: coreos_csum

    - name: store the checksum of the file
      ansible.builtin.copy:
        dest: "{{ coreos_path }}/{{ coreos_file }}.sha256.txt"
        content: "{{ coreos_csum.stat.checksum }}  {{ coreos_file }}\n"
        mode: 0644

  when: >
    (not coreos_old_image.stat.exists) or
    csum_check.changed or
    csum_check.failed

- name: Create OpenShift artifacts directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: u+rwx,g+rx,o+rx
  with_items:
    - "/opt/openshift-install-{{ openshift_version }}"
    - "/opt/openshift-client-{{ openshift_version }}"
    - "{{ opm_dest }}"

- name: Download Openshift installer
  ansible.builtin.unarchive:
    src: "{{ tmp_openshift_install_download_url }}"
    dest: "/opt/openshift-install-{{ openshift_version }}/"
    remote_src: yes
    mode: u+rwx,g+rx,o+rx
    owner: root
    group: root
    exclude:
      - 'README.md'
    creates: "/opt/openshift-install-{{ openshift_version }}/openshift-install"

- name: Download Openshift client
  ansible.builtin.unarchive:
    src: "{{ tmp_openshift_client_download_url }}"
    dest: "/opt/openshift-client-{{ openshift_version }}/"
    remote_src: yes
    mode: u+rwx,g+rx,o+rx
    owner: root
    group: root
    exclude:
      - 'README.md'
    creates: "/opt/openshift-client-{{ openshift_version }}/oc"

- name: Download OpenShift Mirror
  ansible.builtin.unarchive:
    src: "{{ openshift_location }}/oc-mirror.tar.gz"
    dest: "/opt/openshift-client-{{ openshift_version }}/"
    remote_src: yes
    mode: u+rwx,g+rx,o+rx
    owner: root
    group: root
    exclude:
      - 'README.md'
    creates: "/opt/openshift-client-{{ openshift_version }}/oc-mirror"
  when: download_oc_mirror is true

- name: Download OPM (gz)
  ansible.builtin.unarchive:
    src: "{{ opm_download_url }}"
    dest: "{{ opm_dest }}"
    remote_src: yes
    mode: u+rwx,g+rx,o+rx
    owner: root
    group: root
    exclude:
      - 'README.md'
    creates: "{{ opm_dest }}/opm"
  when: opm_download_url | regex_search("^(.*)\.tar\.gz$")

- name: Download OPM
  ansible.builtin.get_url:
    url: "{{ opm_download_url }}"
    dest: "{{ opm_dest }}/opm"
    mode: u+rwx,g+rx,o+rx
  when: not opm_download_url | regex_search("^(.*)\.tar\.gz$")

- name: Download Helm client
  ansible.builtin.get_url:
    url: "{{ helm_cli_location }}"
    mode: u+rwx,g+rx,o+rx
    dest: "/opt/openshift-client-{{ openshift_version }}/helm"

- name: Download butane client
  ansible.builtin.get_url:
    url: "{{ butane_cli_location }}"
    mode: u+rwx,g+rx,o+rx
    dest: "/opt/openshift-client-{{ openshift_version }}/butane"


- name: Create a symbolic link
  ansible.builtin.file:
    src: "{{ item.value }}"
    dest: "{{ item.key }}"
    state: link
    force: yes
    follow: false
  with_dict:
    "/usr/local/bin/oc": "/opt/openshift-client-{{ openshift_version }}/oc"
    "/usr/local/bin/oc-mirror": "/opt/openshift-client-{{ openshift_version }}/oc-mirror"
    "/usr/local/bin/kubectl": "/opt/openshift-client-{{ openshift_version }}/kubectl"
    "/usr/local/bin/openshift-install": "/opt/openshift-install-{{ openshift_version }}/openshift-install"
    "/usr/local/bin/helm": "/opt/openshift-client-{{ openshift_version }}/helm"
    "/usr/local/bin/butane": "/opt/openshift-client-{{ openshift_version }}/butane"
    "/usr/local/bin/opm": "{{ opm_dest }}/opm"
